name: PR Comment Triggers

on:
  issue_comment:
    types: [created]

jobs:
  triggerPrWorkflow:
    name: Trigger PR workflow
    if: >
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, 'run') &&
      (
      contains(github.event.comment.body, 'first') ||
      contains(github.event.comment.body, 'second')
      )
    runs-on: ubuntu-latest
    steps:
      - id: prData
        uses: actions/github-script@v4
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const { data: pr } = await github.pulls.get({ owner, repo, pull_number: number });
            core.setOutput('ref', pr.head.ref)

      - name: Trigger both workflow
        if: ${{ contains(github.event.comment.body, 'both') }}
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Comments Trigger
          token: ${{ secrets.PERSONAL_TOKEN }}
          ref: ${{ steps.prData.outputs.ref }}

      - name: Trigger first workflow
        if: ${{ contains(github.event.comment.body, 'both') || contains(github.event.comment.body, 'first') }}
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Comments Trigger
          token: ${{ secrets.PERSONAL_TOKEN }}
          ref: ${{ steps.prData.outputs.ref }}
          inputs: '{ "testInput": "14" }'

      - name: Trigger second workflow
        if: ${{ contains(github.event.comment.body, 'both') || contains(github.event.comment.body, 'second') }}
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Comments Trigger
          token: ${{ secrets.PERSONAL_TOKEN }}
          ref: ${{ steps.prData.outputs.ref }}
          inputs: '{ "testInput": "16" }'

      - name: React to comments - Success or Failure
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PERSONAL_TOKEN }}
          script: |
            const { owner, repo } = context.issue;
            const content = process.env.JOB_STATUS === 'success' ? '+1' : '-1'
            await github.reactions.createForIssueComment({ owner, repo, comment_id: context.payload.comment.id, content });
